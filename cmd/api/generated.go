// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	googleuuid "github.com/google/uuid"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// Defines values for CreatePetType.
const (
	CreatePetTypePet CreatePetType = "pet"
)

// Defines values for PetResponseType.
const (
	PetResponseTypePet PetResponseType = "pet"
)

// Defines values for UpdatePetType.
const (
	Pet UpdatePetType = "pet"
)

// CreatePet defines model for CreatePet.
type CreatePet struct {
	Attributes PetCreateAttributes `json:"attributes"`
	Type       CreatePetType       `json:"type"`
}

// CreatePetType defines model for CreatePet.Type.
type CreatePetType string

// PetCreateAttributes defines model for PetCreateAttributes.
type PetCreateAttributes struct {
	Name string `json:"name"`
}

// PetResponse defines model for PetResponse.
type PetResponse struct {
	Attributes PetResponseAttributes `json:"attributes"`
	Id         googleuuid.UUID       `json:"id"`
	Type       PetResponseType       `json:"type"`
}

// PetResponseType defines model for PetResponse.Type.
type PetResponseType string

// PetResponseAttributes defines model for PetResponseAttributes.
type PetResponseAttributes struct {
	Name string `json:"name"`
}

// UpdatePet defines model for UpdatePet.
type UpdatePet struct {
	Attributes *struct {
		Name string `json:"name"`
	} `json:"attributes,omitempty"`
	Id   googleuuid.UUID `json:"id"`
	Type UpdatePetType   `json:"type"`
}

// UpdatePetType defines model for UpdatePet.Type.
type UpdatePetType string

// CreatePetJSONBody defines parameters for CreatePet.
type CreatePetJSONBody struct {
	Data CreatePet `json:"data"`
}

// UpdatePetJSONBody defines parameters for UpdatePet.
type UpdatePetJSONBody struct {
	Data UpdatePet `json:"data"`
}

// CreatePetJSONRequestBody defines body for CreatePet for application/json ContentType.
type CreatePetJSONRequestBody CreatePetJSONBody

// UpdatePetJSONRequestBody defines body for UpdatePet for application/json ContentType.
type UpdatePetJSONRequestBody UpdatePetJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a new pet to the store
	// (POST /pets)
	CreatePet(w http.ResponseWriter, r *http.Request)
	// Deletes a pet
	// (DELETE /pets/{petId})
	DeletePet(w http.ResponseWriter, r *http.Request, petId googleuuid.UUID)
	// Find pet by ID
	// (GET /pets/{petId})
	GetPetById(w http.ResponseWriter, r *http.Request, petId googleuuid.UUID)
	// Update an existing pet
	// (PUT /pets/{petId})
	UpdatePet(w http.ResponseWriter, r *http.Request, petId googleuuid.UUID)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Create a new pet to the store
// (POST /pets)
func (_ Unimplemented) CreatePet(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Deletes a pet
// (DELETE /pets/{petId})
func (_ Unimplemented) DeletePet(w http.ResponseWriter, r *http.Request, petId googleuuid.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Find pet by ID
// (GET /pets/{petId})
func (_ Unimplemented) GetPetById(w http.ResponseWriter, r *http.Request, petId googleuuid.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update an existing pet
// (PUT /pets/{petId})
func (_ Unimplemented) UpdatePet(w http.ResponseWriter, r *http.Request, petId googleuuid.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// CreatePet operation middleware
func (siw *ServerInterfaceWrapper) CreatePet(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreatePet(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeletePet operation middleware
func (siw *ServerInterfaceWrapper) DeletePet(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "petId" -------------
	var petId googleuuid.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "petId", chi.URLParam(r, "petId"), &petId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "petId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeletePet(w, r, petId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPetById operation middleware
func (siw *ServerInterfaceWrapper) GetPetById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "petId" -------------
	var petId googleuuid.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "petId", chi.URLParam(r, "petId"), &petId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "petId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPetById(w, r, petId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdatePet operation middleware
func (siw *ServerInterfaceWrapper) UpdatePet(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "petId" -------------
	var petId googleuuid.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "petId", chi.URLParam(r, "petId"), &petId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "petId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdatePet(w, r, petId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/pets", wrapper.CreatePet)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/pets/{petId}", wrapper.DeletePet)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/pets/{petId}", wrapper.GetPetById)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/pets/{petId}", wrapper.UpdatePet)
	})

	return r
}

type CreatePetRequestObject struct {
	Body *CreatePetJSONRequestBody
}

type CreatePetResponseObject interface {
	VisitCreatePetResponse(w http.ResponseWriter) error
}

type CreatePet201JSONResponse struct {
	Data PetResponse `json:"data"`
}

func (response CreatePet201JSONResponse) VisitCreatePetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreatePet405Response struct {
}

func (response CreatePet405Response) VisitCreatePetResponse(w http.ResponseWriter) error {
	w.WriteHeader(405)
	return nil
}

type DeletePetRequestObject struct {
	PetId googleuuid.UUID `json:"petId"`
}

type DeletePetResponseObject interface {
	VisitDeletePetResponse(w http.ResponseWriter) error
}

type DeletePet204Response struct {
}

func (response DeletePet204Response) VisitDeletePetResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeletePet400Response struct {
}

func (response DeletePet400Response) VisitDeletePetResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type GetPetByIdRequestObject struct {
	PetId googleuuid.UUID `json:"petId"`
}

type GetPetByIdResponseObject interface {
	VisitGetPetByIdResponse(w http.ResponseWriter) error
}

type GetPetById200JSONResponse struct {
	Data *PetResponse `json:"data,omitempty"`
}

func (response GetPetById200JSONResponse) VisitGetPetByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPetById400Response struct {
}

func (response GetPetById400Response) VisitGetPetByIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type GetPetById404Response struct {
}

func (response GetPetById404Response) VisitGetPetByIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type UpdatePetRequestObject struct {
	PetId googleuuid.UUID `json:"petId"`
	Body  *UpdatePetJSONRequestBody
}

type UpdatePetResponseObject interface {
	VisitUpdatePetResponse(w http.ResponseWriter) error
}

type UpdatePet200JSONResponse PetResponse

func (response UpdatePet200JSONResponse) VisitUpdatePetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdatePet400Response struct {
}

func (response UpdatePet400Response) VisitUpdatePetResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type UpdatePet404Response struct {
}

func (response UpdatePet404Response) VisitUpdatePetResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type UpdatePet405Response struct {
}

func (response UpdatePet405Response) VisitUpdatePetResponse(w http.ResponseWriter) error {
	w.WriteHeader(405)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Create a new pet to the store
	// (POST /pets)
	CreatePet(ctx context.Context, request CreatePetRequestObject) (CreatePetResponseObject, error)
	// Deletes a pet
	// (DELETE /pets/{petId})
	DeletePet(ctx context.Context, request DeletePetRequestObject) (DeletePetResponseObject, error)
	// Find pet by ID
	// (GET /pets/{petId})
	GetPetById(ctx context.Context, request GetPetByIdRequestObject) (GetPetByIdResponseObject, error)
	// Update an existing pet
	// (PUT /pets/{petId})
	UpdatePet(ctx context.Context, request UpdatePetRequestObject) (UpdatePetResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// CreatePet operation middleware
func (sh *strictHandler) CreatePet(w http.ResponseWriter, r *http.Request) {
	var request CreatePetRequestObject

	var body CreatePetJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreatePet(ctx, request.(CreatePetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreatePet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreatePetResponseObject); ok {
		if err := validResponse.VisitCreatePetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeletePet operation middleware
func (sh *strictHandler) DeletePet(w http.ResponseWriter, r *http.Request, petId googleuuid.UUID) {
	var request DeletePetRequestObject

	request.PetId = petId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeletePet(ctx, request.(DeletePetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeletePet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeletePetResponseObject); ok {
		if err := validResponse.VisitDeletePetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPetById operation middleware
func (sh *strictHandler) GetPetById(w http.ResponseWriter, r *http.Request, petId googleuuid.UUID) {
	var request GetPetByIdRequestObject

	request.PetId = petId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetPetById(ctx, request.(GetPetByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPetById")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetPetByIdResponseObject); ok {
		if err := validResponse.VisitGetPetByIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdatePet operation middleware
func (sh *strictHandler) UpdatePet(w http.ResponseWriter, r *http.Request, petId googleuuid.UUID) {
	var request UpdatePetRequestObject

	request.PetId = petId

	var body UpdatePetJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdatePet(ctx, request.(UpdatePetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdatePet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdatePetResponseObject); ok {
		if err := validResponse.VisitUpdatePetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RXbW/bNhD+KzduQFdAlpykaVN/S5tuM1C0Rp0OGJp8oKWTxFYiOfJoxwj83weScvyi",
	"ZE2GDinQbzbJe3+eu9M1y1WrlURJlo2umc1rbHn4+dogJ5wg+T+8KAQJJXkzMUqjIYGWjUreWEyY3jq6",
	"ZpzIiJmj+O8XgyUbsZ+zjZ2sM5JNkKKR043IKmG01OhFCyy5a4iNmEZiCUPpWjb6FP5drp8xS0bIiq1W",
	"CTP4txMGC/8o3CbbzmxE1Owz5uRN3ebBw6KVvA3O4hVvdeO1v3X5kn3NvSB2h0cf0GolLf6feV/b2M28",
	"KHZDOSkOTp7z43xwePASB8+GLw4HvDzJB/nz45cnLw7yF8d82As1YVeDSg26w0qpqkHnRJF+/Dg+274d",
	"iFYrQ5ssbj1mCdOcan8mqHazNFdtFq+zcL/6VkAJtu6Nllvy9rh4+aiLb8DSRwzgx8ZcPyP+rZClikZs",
	"boT2lWEjdl4LC8ICBxuSBRMkmJIyCFM0czQw4xYLUBKoRnivUZ5OxnCUDsFqzEUpcu5VpQB/KQc5l1AK",
	"WYByBK3XwmfK0YWcLnhVoQFO8Kkm0qMss/EoFery197R0xTG0STVwhQgCE0wBKoMxxoJrPczgQU+mSPY",
	"haC8xgJIhQcFWlF5b4wl4FobxfP6pwu5dlOqBdTYaHAWRKuNmmOQ8+EtaqQaDQh6YmG2hJZ/EbKCvOay",
	"QruxUAoZIA6CLDYlKLO+y1WB6YU8rznBgi8TWAiqgUQb/A0O7BsVEiqUaHiTAJcF4JVWFsGqFtdBS1xA",
	"iZycQevfvz+dHqUX8kJO/SNnsXQNNEJ+saMLOYBP5/V2QQ1qZQUps4wJt6Ms20Jll/wB1+Lmt0YKSX56",
	"o84qZ/Lo8Fb8pY9829iDLWSzRs2ylltCk1mTZy0XMjMY7dlMaZRci3TJ2+YpS1gjcuzmWUe6U83zGuEw",
	"9VR2pmEj1sFqsVikPNymylRZJ2qzt+PXb95N3wwO02FaU9uERUFQaBlrwE46/2CwDX6WsDkaGzl0kA7T",
	"w+Fg+u50Mv3j/bnX0nnLRuzIX3ZdIPS6zEfsf2hlqU/IuDoAD7X2IO8AFZxgQXMkwri4eT0J3cI3A7T0",
	"ShVLrzZXklDGFq510/E0+2y9mfVS9sA+XXDiX1sENi7td6ggfRma0VdiFnIn5o0SMg6D1jgxg1OHw4PH",
	"jHd7ubp3xFOX52itp+tNQT1ung2P+5AYyzlvRAFCahezal3bcrO8B1yIV/ZmhHjRAL/sWiONi1W01SAF",
	"Hu1C6yycR2hpbniLhMbr6rl35ttTZ9sgOSOZHzd+jPnRl6wJGmz2yplsleZxBvDqsoeoZ/0qvFOwhlgo",
	"1PDuQvlczHnjcK9YMaV+2Mb5vluchFV4S0P4EDIaJrSQVYOd7G6xfkeaIL1ajosfsVrD74f/t3Dd3sn1",
	"f4HQ+Ays82FgEd/egkg/bKUiKJWTxR7UfvNLmK/ybAkh/ftY862kpzEu/sAl4JWw5HeetY6ih7nNV8KP",
	"AbnvYrpukn7vWbNXVJT0X2bswzj2AMLcfzR+W7rcMWz/9PrilwZe5RiPd7l1O0v6w9YLhW+oSIq4kmbz",
	"I+bx1L3dN/9mjmZJtdcZvpxgqVxcQndowlaXq38CAAD//8sBq+dnEwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
